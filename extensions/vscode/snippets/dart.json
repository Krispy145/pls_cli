{
  "Mappable Model": {
    "prefix": ["model", "mappable"],
    "body": [
      "import 'package:dart_mappable/dart_mappable.dart';",
      "",
      "part '${1}_model.mapper.dart';",
      "",
      "@MappableClass(caseStyle: CaseStyle.snakeCase)",
      "class ${1:/pascalcase}Model with ${1:/pascalcase}ModelMappable {",
      "  final String id;",
      "  final String? name;",
      "",
      "  const ${1:/pascalcase}Model({",
      "    required this.id,",
      "    this.name,",
      "  });",
      "",
      "  static const fromMap = ${1:/pascalcase}ModelMapper.fromMap;",
      "  static const fromJson = ${1:/pascalcase}ModelMapper.fromJson;",
      "",
      "  static const empty = ${1:/pascalcase}Model(id: '');",
      "",
      "  static const ${1:/camelcase}One = ${1:/pascalcase}Model(",
      "    id: '${1}_one_id',",
      "    name: '${1:/capitalize} One',",
      "  );",
      "",
      "  static const ${1:/camelcase}Two = ${1:/pascalcase}Model(",
      "    id: '${1}_two_id',",
      "    name: '${1:/capitalize} Two',",
      "  );",
      "",
      "  static const ${1:/camelcase}Three = ${1:/pascalcase}Model(",
      "    id: '${1}_three_id',",
      "    name: '${1:/capitalize} Three',",
      "  );",
      "",
      "  static final List<${1:/pascalcase}Model> fakeData = [",
      "    ${1:/camelcase}One,",
      "    ${1:/camelcase}Two,",
      "    ${1:/camelcase}Three,",
      "  ];",
      "}",
      ""
    ],
    "description": "A new Mappable Model"
  },
  "New Store": {
    "prefix": "store",
    "body": [
      "import 'package:mobx/mobx.dart';",
      "",
      "part 'store.g.dart';",
      "",
      "/// [${1:/pascalcase}Store] is a class that uses [_${1:/pascalcase}Store] to manage the state of the ${1:/camelcase} feature.",
      "class ${1:/pascalcase}Store = _${1:/pascalcase}Store with _${1:/pascalcase}Store;",
      "",
      "/// [_${1:/pascalcase}Store] is a class that manages the state of the ${1:/camelcase} feature.",
      "abstract class _${1:/pascalcase}Store with Store {",
      "",
      "}",
      ""
    ],
    "description": "A new Store"
  },
  "New LoadStateStore": {
    "prefix": "lsstore",
    "body": [
      "import 'package:mobx/mobx.dart';",
      "import '/data/models/${1}_model.dart';",
      "import '/domain/repositories/${1}_repository.dart';",
      "import 'package:utilities/widgets/load_state/store.dart';",
      "",
      "part 'store.g.dart';",
      "",
      "/// [${1:/pascalcase}Store] is a class that uses [_${1:/pascalcase}Store] to manage the state of the ${1:/pascalcase}Model feature.",
      "class ${1:/pascalcase}Store = _${1:/pascalcase}Store with _${1:/pascalcase}Store;",
      "",
      "/// [_${1:/pascalcase}Store] is a class that manages the state of the ${1:/pascalcase}Model feature.",
      "abstract class _${1:/pascalcase}Store extends LoadStateStore with Store {",
      "  /// [repository] is an instance of [${1:/pascalcase}Repository].",
      "  final ${1:/pascalcase}Repository repository = ${1:/pascalcase}Repository();",
      "",
      "  /// [${1:/camelcase}Model] is an observable list of [${1:/pascalcase}Model]s.",
      "  @observable",
      "  ObservableList<${1:/pascalcase}Model?> ${1:/camelcase}Model = ObservableList<${1:/pascalcase}Model?>();",
      "",
      "  /// [load${1:/pascalcase}Models] loads all [${1:/pascalcase}Model]s from the data source.",
      "  @action",
      "  Future<void> load${1:/pascalcase}Models() async {",
      "    try {",
      "      setLoading();",
      "      final loaded${1:/pascalcase} = await repository.getAll${1:/pascalcase}Models();",
      "      if (loaded${1:/pascalcase}.isNotEmpty) {",
      "        ${1:/camelcase}Model",
      "          ..clear()",
      "          ..addAll(loaded${1:/pascalcase});",
      "        setLoaded();",
      "      } else {",
      "        setEmpty();",
      "      }",
      "    } catch (e) {",
      "      setError();",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "A new LoadStateStore"
  }
}
