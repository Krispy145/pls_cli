{
  "Mappable Model": {
    "prefix": ["model", "mappable"],
    "body": [
      "import \"package:dart_mappable/dart_mappable.dart\";",
      "",
      "part \"$0_model.mapper.dart\";",
      "",
      "@MappableClass(caseStyle: CaseStyle.snakeCase)",
      "class $1Model with $1ModelMappable {",
      "  final String id;",
      "  final String? name;",
      "",
      "  const $1Model({",
      "\trequired this.id,",
      "\t this.name,",
      "  });",
      "",
      "  static const fromMap = $1ModelMapper.fromMap;",
      "  static const fromJson = $1ModelMapper.fromJson;",
      "",
      "  static const empty = $1Model(id: \"\");",
      "",
      "  static const $2One = $1Model(",
      "\tid: \"$2OneId\",",
      "\tname: \"{{name.titleCase()}} One\",\t",
      "  );",
      "  ",
      "  static const $2Two = $1Model(",
      "\tid: \"$2TwoId\",",
      "\tname: \"{{name.titleCase()}} Two\",\t",
      "  );",
      "  ",
      "  static const $2Three = $1Model(",
      "\tid: \"$2ThreeId\",",
      "\tname: \"{{name.titleCase()}} Three\",\t",
      "  );",
      "",
      "  static final List<$1Model> fakeData = [",
      "\t$2One,",
      "\t$2Two,",
      "\t$2Three,",
      "  ];",
      "}",
      ""
    ],
    "description": "A new Mappable Model"
  },
  "New Store": {
    "prefix": "store",
    "body": [
      "import \"package:mobx/mobx.dart\";",
      "",
      "part \"store.g.dart\";",
      "",
      "/// [$1Store] is a class that uses [_$1Store] to manage state of the $2 feature.",
      "class $1Store = _$1Store with _$$1Store;",
      "",
      "/// [_$1Store] is a class that manages the state of the $2 feature.",
      "abstract class _$1Store with Store {",
      "  ",
      "}",
      ""
    ],
    "description": "A new Store"
  },
  "New LoadStateStore": {
    "prefix": "lsstore",
    "body": [
      "import \"package:mobx/mobx.dart\";",
      "import \"/data/models/$1_model.dart\";",
      "import \"/domain/repositories/$1.repository.dart\";",
      "import \"package:utilities/widgets/load_state/store.dart\";",
      "",
      "part \"store.g.dart\";",
      "",
      "/// [$2Store] is a class that uses [_$2Store] to manage state of the $3Model feature.",
      "class $2Store = _$2Store with _$$2Store;",
      "",
      "/// [_$2Store] is a class that manages the state of the $3Model feature.",
      "abstract class _$2Store extends LoadStateStore with Store {",
      "  /// [repository] is an instance of [$2Repository].",
      "  final $2Repository repository = $2Repository();",
      "",
      "  /// [$3Model] is an observable list of [$2Model]s.",
      "  @observable",
      "  ObservableList<$2Model?> $3Model = ObservableList<$2Model?>();",
      "",
      "  /// [load$2Models] loads all [$2Model]s from the data source.",
      "  @action",
      "  Future<void> load$2Models() async {",
      "\ttry {",
      "\t  setLoading();",
      "\t  final loaded$2 = await repository.getAll$2Models();",
      "\t  if (loaded$2.isNotEmpty) {",
      "\t\t$3Model",
      "\t\t  ..clear()",
      "\t\t  ..addAll(loaded$2);",
      "\t\tsetLoaded();",
      "\t  } else {",
      "\t\tsetEmpty();",
      "\t  }",
      "\t} catch (e) {",
      "\t  setError();",
      "\t}",
      "  }",
      "}",
      ""
    ],
    "description": "A new LoadStateStore"
  }
}
