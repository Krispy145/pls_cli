part of "_source.dart";

/// [Firestore{{name.pascalCase()}}DataSource] is a class that implements [{{name.pascalCase()}}DataSource] interface.
class Firestore{{name.pascalCase()}}DataSource extends PaginatedFirestoreDataSource<{{name.pascalCase()}}Model, BasicSearchQueryModel> implements {{name.pascalCase()}}DataSource<FirestoreResponseModel<{{name.pascalCase()}}Model?>> {
  /// [Firestore{{name.pascalCase()}}DataSource] constructor.
  Firestore{{name.pascalCase()}}DataSource()
      : super(
          '{{name.camelCase()}}s',
          convertDataTypeFromMap: {{name.pascalCase()}}Model.fromMap,
          convertDataTypeToMap: (data) => data.toMap(),
          titleFromType: ({{name.camelCase()}}) => {{name.camelCase()}}.name,
        );

  @override
  Query<Map<String, dynamic>> buildQuery(BasicSearchQueryModel query, Query<Map<String, dynamic>> collectionReference) {
    // TODO: implement buildQuery
    throw UnimplementedError();
  }

  /// [_handleError] is an optional helper method that handles errors when calling the Firestore.
  // ignore: unused_element
  Future<T?> _handleError<T>(Future<T?> Function() firestoreCall) async {
    try {
      return await firestoreCall();
    } catch (e) {
      AppLogger.print(
        "Firestore RESULT: Failed request: $e",
        [ParentNameTemplateLoggers.{{name.camelCase()}}],
        type: LoggerType.error,
      );
      return null;
    }
  }
}

