part of "_source.dart";

/// [Api{{name.pascalCase()}}DataSource] is a class that implements [{{name.pascalCase()}}DataSource] interface.
/// TODO: Setup an ApiResponseModel that can be used to handle API responses.
class Api{{name.pascalCase()}}DataSource extends PaginatedApiDataSource<{{name.pascalCase()}}Model, BasicSearchQueryModel> implements {{name.pascalCase()}}DataSource<ResponseModel> {
  /// [Api{{name.pascalCase()}}DataSource] constructor.
  Api{{name.pascalCase()}}DataSource()
      : super(
          //TODO: Replace the following URL with the actual API URL.
          "https://api.{{name.snakeCase()}}.com",
          sourceSuffix: "{{name.snakeCase()}}",
          convertDataTypeFromMap: {{name.pascalCase()}}Model.fromMap,
          convertDataTypeToMap: (data) => data.toMap(),
        );

  @override
  Map<String, dynamic> buildQuery(BasicSearchQueryModel query) {
    // TODO: implement buildQuery
    throw UnimplementedError();
  }

  @override
  Future<Pair<ResponseModel, List<{{name.pascalCase()}}Model?>>> getPage({ResponseModel? lastResponse, int? size}) {
    // TODO: implement getPage
    throw UnimplementedError();
  }

  @override
  Future<Pair<ResponseModel, List<{{name.pascalCase()}}Model?>>> searchPage({ResponseModel? lastResponse, int? size, required BasicSearchQueryModel query}) {
    // TODO: implement searchPage
    throw UnimplementedError();
  }

  /// [_handleError] is an optional helper method that handles errors when calling the API.
  // ignore: unused_element
  Future<T?> _handleError<T>(Future<T?> Function() apiCall) async {
    try {
      return await apiCall();
    } catch (e) {
      AppLogger.print(
        "API RESULT: Failed request: $e",
        [ParentNameTemplateLoggers.{{name.camelCase()}}],
        type: LoggerType.error,
      );
      return null;
    }
  }
}
